{
  "hash": "765a95e75fe1c069b3b38adea01bf26e",
  "result": {
    "markdown": "---\ntitle: \"Cours de visualisation des données\"\nauthor: \"Profs programmation R - STID VCOD\"\ndate: 2022-10-31\ncategories: [Cours]\nformat: html\n---\n\n\n## Introduction : librairie *ggplot2* ([Wickham 2010](https://www.tandfonline.com/doi/abs/10.1198/jcgs.2009.07098))\n\n-   Permet une représentation des données plus aisée et plus lisible lorsque l'on traite plus de 2 variables.\n-   Adaptée au format *tibble*, sous-librairie de *tidyverse*.\n-   Construite sur une **grammaire superposée**, basée sur la *grammaire des graphiques* proposée par [Wilkinson en 2005](https://www.springer.com/us/book/9780387245447).\n-   Graphiques construits en **couches indépendantes**, à inclure selon la représentation souhaitée :\n    -   les **données** à représenter ainsi que leurs **attributs esthétiques** (axes, taille, couleurs, symboles, ...)\n    -   les **attributs géométriques** (points, lignes, barres, ...)\n    -   les **transformations statistiques** (dénombrement, tendances, ...)\n    -   les **échelles**\n    -   le **système de coordonnées** (cartésien, logarithmique, ...)\n    -   le **découpage en facettes** (plusieurs graphiques dans la même fenêtre).\n-   **Valeurs par défaut**: par exemple, couche *transformation statistique* effectuée par défaut si la couche *attributs géométriques* est \"boxplot\".\n\n## ggplot2 : fonctions et couches\n\n-   **ggplot()** : fonction principale, crée et renvoie le graphique, en définissant quelles données sont représentées.\n\n-   **aes()** : définit les attributs esthétiques.\n\n-   **geom_xxx()** : définit la couche *attributs géométriques*.\n\n-   **stat_xxx()** : définit la couche *transformations statistiques*.\n\n-   **scale_xxx()** : définit la couche *échelles*.\n\n-   **coord_xxx()** : définit la couche *système de coordonnées*.\n\n-   **facet_xxx()** : définit la couche *découpage en facettes*.\n\n-   **theme_xxx(), labs(), xlab(), ylab(), ggtitle()** : pour personnaliser le graphique.\n\n-   Seule *aes()* s'utilise à l'intérieur des autres fonctions, toutes les couches étant gérées de manière indépendante.\n\n-   Possibilité d'enregistrer la sortie de *ggplot()* dans une variable, puis de lui ajouter des couches. Appeler la variable pour afficher le graphique.\n\n## Représentation en couches\n\n-   **Couche principale** : avec *ggplot()* et *aes()*, définition des données à représenter et des axes de coordonnées.\n\n-   Exemple avec les données *diamonds* :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nggplot(diamonds, aes(carat))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\n## Représentation en couches (2)\n\n-   **Couche attributs géométriques** : ajout de la représentation souhaitée pour les données définies dans *ggplot()*.\n\n-   Exemple : ajout de l'histogramme de la variable *carat* :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(diamonds, aes(carat)) + geom_histogram()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n-   **Remarque** : dans cet exemple, la couche *transformations statistiques* est cachée, correspondant au calcul des classes, amplitudes et densités de l'histogramme.\n\n## Représentation en couches (3)\n\n-   Stockage du résultat dans une variable, à laquelle on peut ajouter des couches\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng = ggplot(diamonds, aes(carat))\ng+geom_histogram()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n## Représentation en couches (4)\n\n-   Stockage du résultat dans une variable, à laquelle on peut ajouter des couches\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng = ggplot(diamonds, aes(carat))+geom_histogram()\ng\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n## Personnalisation\n\n-   Ajout d'un titre au graphique avec *ggtitle()*\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng = ggplot(diamonds, aes(carat))+geom_histogram()\ng+ggtitle(\"Distribution des carats\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n## Personnalisation (2)\n\n-   Changement du thème par défaut en classique avec *theme_classic()*\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng = ggplot(diamonds, aes(carat))+geom_histogram()\ng+ggtitle(\"Distribution des carats\")+theme_classic()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n## Personnalisation (3)\n\n-   Changement du thème par défaut sans le fond gris avec *theme_light()*\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng = ggplot(diamonds, aes(carat))+geom_histogram()\ng+ggtitle(\"Distribution des carats\")+theme_light()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n-   Autres thèmes disponibles dans la librairie (voir ?theme_light)\n\n## Personnalisation (4)\n\n-   Gestion du nom de l'axe horizontal (abcisses) avec *xlab()*\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng = ggplot(diamonds, aes(carat))+geom_histogram()\ng+ggtitle(\"Distribution des carats\")+xlab(\"Carats\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n## Personnalisation (5)\n\n-   Gestion du nom de l'axe vertical (ordonnées) avec *ylab()*\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng = ggplot(diamonds, aes(carat))+geom_histogram()\ng+ggtitle(\"Distribution des carats\")+ylab(\"Effectif\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n## Personnalisation (6)\n\n-   Gestion du titre et des noms des axes avec *labs()*\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng = ggplot(diamonds, aes(carat))+geom_histogram()\ng+labs(title=\"Distribution des carats\", \n       x=\"Carats\", y=\"Effectif\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n-   Personnalisation de la position, taille, couleur, etc... d'un nom ou titre avec *theme()*\n\n## Aspect suivant une variable\n\n-   Exemple : création d'une barre de comptage avec *geom_bar()*\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(diamonds, aes(x=\"\"))+geom_bar()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){fig-align='center' width=75%}\n:::\n:::\n\n\n## Aspect suivant une variable (2)\n\n-   Exemple : remplissage de la barre avec des couleurs suivant les modalités de la variable *cut*\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(diamonds, aes(x=\"\", fill=cut))+geom_bar()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){fig-align='center' width=65%}\n:::\n:::\n\n\n-   Remarque : légendes par défaut, peuvent être personnalisées (voir suite du cours)\n\n## TP : Exercice 1\n\n-   Représenter l'histogramme de la distribution de la variable *Sepal.Length* du jeu de données *iris* avec les valeurs par défaut.\n\n-   Changer le nombre de classes (=*bins*) souhaitées dans l'histogramme afin d'obtenir une distribution moins variable (indication : options *bins* **ou** *binwidth* dans la couche *geom_histogram*).\n\n-   Changer le thème afin d'obtenir un graphique sans fond gris.\n\n-   Ajouter un titre et des noms adaptés aux axes sur le graphique obtenu.\n\n-   Représenter la distribution des espèces sous forme de barre empilée. Ajouter un titre et enlever le nom de l'axe des abcisses.\n\n-   Représenter la distribution de la variable *Sepal.Length* conditionnellement à l'espèce sous forme de boîtes à moustaches (indication : *geom_boxplot*). Ajouter un titre et changer les noms des axes.\n\n## Changement d'échelle\n\n-   Changement d'échelle en utilisant une formule dans *aes()*,\n\n-   Changement d'échelle en utilisant les variables crées par les fonctions du type *geom_xxx()*, de type *..xxx..*,\n\n-   Changement d'échelle en ajoutant une couche avec les fonctions du type *scale_aspect esthétique à modifier_type de l'aspect()*.\n\n-   Exemple : changer l'effectif en fréquence ou en pourcentage dans un diagramme.\n\n## Changement d'échelle (2)\n\n-   Exemple : changer l'effectif en fréquence dans le diagramme précédent en utilisant la variable *..count..* créée par *geom_bar()*\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(diamonds, aes(x=\"\", fill=cut))+\n  geom_bar(aes(y=..count../sum(..count..)))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){fig-align='center' width=65%}\n:::\n:::\n\n\n## Changement d'échelle (3)\n\n-   Remarque : option *position=\"fill\"* dans *geom_bar()* pour le changement en fréquence $\\Rightarrow$ même résultat.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(diamonds, aes(x=\"\", fill=cut))+\n  geom_bar(position = \"fill\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){fig-align='center' width=65%}\n:::\n:::\n\n\n## Changement d'échelle (4)\n\n-   Changer l'effectif en fréquence, puis la fréquence en pourcentage : fonction *scale_y\\_continuous()* (où *percent()* est chargé via la librairie *scales*)\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(scales)\nggplot(diamonds, aes(x=\"\", fill=cut))+\n  geom_bar(position = \"fill\")+\n  scale_y_continuous(labels = percent)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){fig-align='center' width=60%}\n:::\n:::\n\n\n## Changement de coordonnées\n\n-   Suivant le type de graphique souhaité, il peut être nécessaire de changer le type de coordonnées représentées.\n\n-   Exemples typiques:\n\n    -   coordonnées cartésiennes (x,y) pour représenter une variable en fonction d'une autre,\n    -   coordonnées logarithmiques (x, log(y)) pour représenter des concentrations,\n    -   coordonnées polaires (xcos(y), xsin(y)) pour effectuer des diagrammes circulaires.\n\n-   Par défaut, *ggplot()* représente les variables en coordonnées cartésiennes.\n\n-   Changement de coordonnées effectué en ajoutant une couche avec les fonctions du type *coord_xxx()*.\n\n## Changement de coordonnées (2)\n\n-   Exemple : représentation de la distribution de la variable *cut* sous forme de diagramme circulaire avec la fonction *coord_polar()* (option *width=1* pour enlever le trou au centre du diagramme)\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(diamonds, aes(x = \"\", fill = cut)) + \n    geom_bar(position = \"fill\", width = 1) +\n    scale_y_continuous(labels = percent) +\n    coord_polar(theta = \"y\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){fig-align='center' width=45%}\n:::\n:::\n\n\n## Changement de coordonnées (3)\n\n-   Exemple de code complet pour un diagramme circulaire propre :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(diamonds, aes(x = \"\", fill = cut)) + \n    geom_bar(position = \"fill\", width = 1) +\n    scale_fill_brewer(palette = \"Set2\") +\n    scale_y_continuous(labels = percent) +\n    coord_polar(theta = \"y\") +\n    theme_minimal() +\n    theme(axis.title = element_blank()) +\n    labs(fill = \"Variable cut\")\n```\n:::\n\n\n-   où :\n    -   *scale_fill_brewer(palette=xxx)* change les couleurs de remplissage,\n    -   *theme(axis.title=element_blank())* enlève les noms des axes,\n    -   *labs(fill=xxx)* change le nom de la légende.\n\n## Changement de coordonnées (4)\n\n-   Résultat du code précédent :\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-18-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n## TP : Exercice 2 avec ggplot2 et scales\n\n-   Reprendre l'histogramme créé dans l'exercice 1. Changer l'échelle des ordonnées afin d'avoir une représentation en densité (indication : variable *..density..* en sortie de la couche *geom_histogram*). Ajouter un titre et changer le nom des axes.\n\n-   Représenter sur le même graphique un histogramme par espèce.\n\n-   Représenter la distribution des espèces sous forme de diagramme en barres horizontales (indication : *coord_flip()*). Ajouter un titre et changer les noms des axes.\n\n-   Refaire le même graphique avec une distribution en pourcentages.\n\n-   Représenter la distribution des espèces sous forme de diagramme circulaire avec les valeurs par défaut.\n\n-   Refaire le graphique précédent avec une représentation propre et un titre.\n\n## Superposition de graphiques\n\n-   Aisée grâce à la grammaire ordonnée et la représentation en couches\n-   Exemple : nuage de points des variables *carat* et *price* avec *geom_point()*, et ajout des valeurs sur les axes avec *geom_rug()*\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ng = ggplot(diamonds, aes(carat, price))+geom_point()\ng+geom_rug()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-19-1.png){fig-align='center' width=60%}\n:::\n:::\n\n\n## Superposition de graphiques (2)\n\n-   Exemple : ajout d'une courbe de régression avec *geom_smooth()*\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ng = ggplot(diamonds, aes(carat, price))+geom_point()\ng+geom_rug()+geom_smooth()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-20-1.png){fig-align='center' width=75%}\n:::\n:::\n\n\n## Superposition de graphiques (3)\n\n-   Exemple : ajouter la droite de régression avec *geom_smooth()* (option *se=FALSE* pour enlever l'intervalle de prédiction)\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ng = ggplot(diamonds, aes(carat, price))+geom_point()\ng+geom_smooth(method = \"lm\", se = FALSE)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-21-1.png){fig-align='center' width=70%}\n:::\n:::\n\n\n## Superposition de graphiques (4)\n\n-   Représenter les points suivant les valeurs d'une variable avec *shape* et *col*\n-   Exemple : nuage de points et courbe de régression avec des formes et des couleurs suivant les valeurs de la variable *cut*\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ng = ggplot(diamonds, aes(carat, price, shape=cut, col=cut))+geom_point()\ng+geom_smooth(se = FALSE)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-22-1.png){fig-align='center' width=65%}\n:::\n:::\n\n\n## Facettes\n\n-   Afin de comparer différents graphiques, il peut être plus judicieux d'utiliser les facettes avec *facet_wrap()* et *facet_grid()*\n-   Exemple : graphique précédent avec un graphique par valeur de la variable *cut*\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ng = ggplot(diamonds, aes(carat, price))+geom_point()\ng+geom_smooth(se=FALSE)+facet_wrap(facets=~cut)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-23-1.png){fig-align='center' width=65%}\n:::\n:::\n\n\n## Facettes (2)\n\n-   Réglage de la position des facettes avec les options *ncol=* et *nrow=*\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ng = ggplot(diamonds, aes(carat, price))+geom_point()\ng+geom_smooth(se=FALSE)+facet_wrap(facets=~cut, ncol=2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-24-1.png){fig-align='center' width=65%}\n:::\n:::\n\n\n## Facettes (3)\n\n-   *facet_wrap()* : réglage automatique de la position des facettes en fonction du nombre de modalités,\n-   *facet_grid()* : répartition sur une seule ligne, ou une seule colonne.\n-   Exemple : représentation en ligne des boîtes à moustaches de *carat* suivant les modalités de la variable *color*, et ce pour chaque modalité de la variable *cut*\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ng = ggplot(diamonds, aes(color, carat))+geom_boxplot()\ng+facet_grid(facets=~cut)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-25-1.png){fig-align='center' width=65%}\n:::\n:::\n\n\n## Facettes (4)\n\n-   Représentation en colonne des histogrammes de *carat* suivant les modalités de la variable *cut*\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ng = ggplot(diamonds, aes(carat))+geom_histogram()\ng+facet_grid(facets=cut~.)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-26-1.png){fig-align='center' width=75%}\n:::\n:::\n\n\n## Facettes (5)\n\n-   Gestion des échelles sur chaque facette : laisser libre l'échelle des ordonnées avec *scales=\"free_y\"*\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ng = ggplot(diamonds, aes(carat))+geom_histogram()\ng+facet_grid(facets=cut~., scales=\"free_y\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-27-1.png){fig-align='center' width=75%}\n:::\n:::\n\n\n## Facettes (6)\n\n-   Possibilité de faire une graphique par couple de modalités\n-   Exemple : un nuage de point de *price* en fonction de *carat*, avec la droite de régression, et ce pour chaque modalité de la variable *color* (en lignes) et de la variable *cut* (en colonnes)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng = ggplot(diamonds, aes(carat, price)) + geom_point() +\n    geom_smooth(method = \"lm\", fullrange = T)\ng+facet_grid(facets = color ~ cut)\n```\n:::\n\n\n## Facettes (7)\n\n-   Résultat du code précédent\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-29-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n## TP : Exercice 3 avec ggplot2 et scales\n\n-   Représenter le nuage de points des longueurs de Sépales en fonction de leurs largeurs. Ajouter la courbe de régression.\n\n-   Refaire la question précédente avec, sur le même graphique, des formes et des couleurs de points différents pour chaque espèce. Ajouter les droites de régression et les indicateurs de valeurs par espèce.\n\n-   Séparer le graphique précédent en facettes, avec un graphique par espèces.\\\n\n-   Reprendre l'histogramme en densité créé dans l'exercice 2. Représenter sur une colonne un histogramme par espèce d'iris.\n\n## Changements dans la légende\n\n-   Changement de position : couche *theme(legend.position = xxx)* avec *xxx* = \"left\", \"top\", \"right\", \"bottom\", \"none\" (supprime la légende).\n\n-   Changement de titre : couche *labs(xxx=nom)* s'il existe une variable pour *xxx*, où *xxx=fill*, *color*, etc... Suppression du titre avec *nom = element_blank()*.\n\n-   Changement de l'ordre des modalités : couche *scale_xxx_discrete(limits = c(yyy))*, où\n\n    -   *xxx=x* si modalités en abcisse et *xxx=y* si modalités en ordonnée,\n    -   *yyy* nouvel ordre d'apparition des modalités.\n\n-   Changement des modalités dans la légende : couche *scale_xxx_hue(labels = )* s'il existe une variable pour *xxx*, où *xxx=fill*, *color*, etc....\n\n## Gestion des tables complexes avec *gather*\n\n-   Fonction *gather()* (librairie *tidyr*) : crée une table longue en déployant la table de données (=table large) sur 2 colonnes *(key,value)*, où *key* est le nom de la variable, et *value* sa valeur pour chaque observation.\n\n-   Exemple : déploiement de la table *diamonds* sur les variables *carat*, *price*, *depth* et *cut*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(tidyr)\ndiamonds %>% select(carat, price, depth, cut) %>% \n  gather()\n```\n:::\n\n\n-   Passage d'une table $nobs\\times nvar$ à une table $nobs*nvar \\times 2$.\n\n-   Exemple : garder les valeurs de *carat* pour chaque observation :\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% select(carat, price, depth, cut) %>% \n  gather(-carat, key=\"key\", value=\"value\")\n```\n:::\n\n\n## Gestion des tables complexes avec *gather* (2)\n\n-   Exemple : Représentation de *price* et *depth* en fonction de *carat*\n\n\n::: {.cell}\n\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndiamonds %>% select(carat,price,depth) %>% \n  gather(-carat, key = \"var\", value = \"value\") %>% \n  ggplot(aes(carat, value))+geom_point()+\n  facet_grid(facets=var~., scales=\"free_y\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-33-1.png){fig-align='center' width=65%}\n:::\n:::\n\n\n## Gestion des tables complexes avec *gather* (3)\n\n-   Exemple : Représentation de *price* et *depth* en fonction de *carat*, avec une couleur par modalité de *cut*\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndiamonds %>% select(carat,price,depth, cut) %>% \n  gather(-carat, -cut, key = \"var\", value = \"value\") %>% \n  ggplot(aes(carat, value, color=cut))+geom_point()+\n  facet_grid(facets=var~., scales=\"free_y\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-34-1.png){fig-align='center' width=70%}\n:::\n:::\n\n\n## TP : Exercice 4 avec avec ggplot2, scales, dplyr et tidyr\n\n-   Reprendre le graphique de la distribution des espèces en barre empilée créé dans l'exercice 1.\n\n    -   Changer la position de la légende\n    -   Changer le titre de la légende\n\n-   Représenter les nuages de points des trois variables *Sepal.Length*, *Petal.Width* et *Petal.Length* en fonction de la variable *Sepal.Width*.\n\n-   Reprendre le graphique précédent et colorer les points suivant les espèces.\n\n## Réordonner les modalités\n\n-   Librairie *forcats* : permet de réordonner les modalités d'une variable selon les valeurs d'une autre variable.\n\n-   Deux fonctions :\n\n    -   *fct_reorder()* : répartition par ordre croissant ou décroissant,\n\n    -   *fct_shuffle()* : répartition aléatoire.\n\n-   Exemple : représentation de la moyenne de *price* en fonction des valeurs de *cut*, en réordonnant les valeurs de la table résumée *df* suivant les modalités de *cut*\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf = diamonds %>%\n    group_by(cut) %>%\n    summarise(\n        mean = mean(price, na.rm = T),\n        sd = sd(price, na.rm = T)\n    )\n```\n:::\n\n\n## Réordonner les modalités (2)\n\n-   Ordre original\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(df, aes(cut, mean))+geom_point()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-36-1.png){fig-align='center' width=75%}\n:::\n:::\n\n\n## Réordonner les modalités (3)\n\n-   Réordonner les modalités de *cut* par ordre croissant de la moyenne de *price*\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(forcats)\nggplot(df, aes(fct_reorder(cut, mean), mean))+geom_point()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-37-1.png){fig-align='center' width=75%}\n:::\n:::\n\n\n## Réordonner les modalités (4)\n\n-   Réordonner par ordre décroissant de la moyenne\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(\n  df, \n  aes(fct_reorder(cut, mean, .desc = TRUE), mean)\n  )+\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-38-1.png){fig-align='center' width=60%}\n:::\n:::\n\n\n## Réordonner les modalités (5)\n\n-   Réordonner aléatoirement les modalités de *cut*\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(df, aes(fct_shuffle(cut), mean))+geom_point()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-39-1.png){fig-align='center' width=75%}\n:::\n:::\n\n\n## Gestion de la représentation simultanée\n\nTrois syntaxes donnant le même résultat :\n\n-   données et variable spécifiées pour l'ensemble des couches.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(diamonds, aes(x = price)) + geom_histogram()\n```\n:::\n\n\n-   données spécifiées pour l'ensemble des couches, variables à spécifier dans chaque couche.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(diamonds) + \n  geom_histogram(mapping = aes(x = price))\n```\n:::\n\n\n-   données et variables à spécifier dans chaque couche.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() + \n  geom_histogram(data = diamonds, mapping = aes(x = price))\n```\n:::\n\n\n-   Utile pour représenter sur le même graphique des données issues de tables différentes.\n\n## Gestion de la représentation simultanée (2)\n\n-   Exemple : ajouter la moyenne, ainsi qu'un indicateur de dispersion (avec *geom_errorbar()*) sur les boîtes à moustaches du prix suivant la variable *cut*.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(diamonds, aes(cut, price, color = cut)) +\n  scale_color_brewer(palette = \"Set2\") +\n  scale_fill_brewer(palette = \"Set2\") +\n  geom_boxplot(show.legend = FALSE) +\n  geom_errorbar(data = df, \n                mapping = aes(y = mean, \n                              ymin = mean - sd, \n                              ymax = mean + sd), \n                col = \"gray70\", width = .4, size = 1) +\n  geom_point(data = df, \n             mapping = aes(y = mean), \n             col = \"steelblue\", size = 2) +\n  theme_light()\n```\n:::\n\n\n## Gestion de la représentation simultanée (3)\n\n-   Résultat du code précédent\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-44-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n## TP : Exercice 5 avec ggplot2, scales et forcats\n\n-   Reprendre les 3 histogrammes par espèce créés dans l'exercice 3. Ajouter une ligne verticale représentant la moyenne pour chaque espèce (indication : *geom_vline*).\n\n-   Créer une table de données *df* résumant la variable *Sepal.Length* par ses moyennes et écart-types par espèce.\n\n-   Reprendre les boîtes à moustaches crées dans l'exercice 1. Colorer chaque boîte à moustaches et enlever la légende.\n\n-   Ajouter sur chaque boîte à moustache la moyenne (sous forme de point) et l'écart-type (sous forme de barre).\n\n-   Refaire le graphique précédent en réordonnant les modalités par moyenne décroissante.\n\n## TP : Exercice 6 avec ggplot2, dplyr, tidyr et readr\n\n-   Reprendre les données de la banque mondiale. Créer deux tables (une large et une longue) avec uniquement les valeurs estimées. Créer un indicateur de données manquantes dans la table longue.\n\n-   Représenter sur un graphique l'évolution du pourcentage de données manquantes en fonction de l'année. Indication : changer les étiquettes de la variable *annee* en valeurs numériques\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.numeric(substring(annee, 2))\n```\n:::\n\n\n-   Créer la table longue restreinte aux valeurs du contrôle de la corruption et représenter sa distribution en fonction de l'année.\n\n-   Représenter la courbe de l'évolution en moyenne en fonction de l'année. Mettre des noms et un titre appropriés au graphique.\n\n-   Ajouter au graphique précédent l'évolution des pays \"France\", \"Somalia\" et \"Denmark\", avec une légende correcte ainsi qu'une couleur par pays.\n\n## Cartographie\n\n* **Carte choroplèthe** : carte géographique dont chaque zone est colorée selon une mesure statistique.  \n\n* Etape 1 : charger les données géographiques, par exemple directement sur le web avec *geojson_read()*\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(geojsonio)\netats = geojson_read(\n  'https://datahub.io/core/geo-countries/r/countries.geojson',\n  what = \"sp\")\n```\n:::\n\n* où l'option *what* règle le format d'importation. Ici, on importe au format *\"spatial\"*.  \n\n* Ici, *etats* contient toutes les informations nécessaires à la constitution de la carte (latitudes, longitudes, noms des pays, etc...)   \n\n## Cartographie (2)\n\n* Etape 2 : représentation de la carte. Exemple avec *ggplot2* (après convertion de la table pour ggplot2 avec *fortify*)\n\n::: {.cell}\n\n```{.r .cell-code}\netats_f = fortify(etats)\nggplot(etats_f, aes(long, lat, group = group)) +\n  geom_polygon(color = \"white\") +\n  theme_void()\n```\n:::\n\noù *theme_void()* indique un thème vide.\n\n## Cartographie (3)\n\n* Etape 3 : colorer chaque zone en fonction d'une mesure statistique. Ici on associe à chaque zone une valeur aléatoire entre $0$ et $1$\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tibble) # pour rownames_to_column\netats@data$var = runif(nrow(etats@data))\netats_f = fortify(etats)\netats_fj = etats_f %>%\n  inner_join(etats@data %>% rownames_to_column(\"id\"), \n             by = \"id\")\nggplot(etats_fj, \n       aes(long, lat, group = group, fill = var)\n       ) +\n  geom_polygon(color = \"white\") +\n  theme_void()\n```\n:::\n\n\n## Cartographie avec leaflet\n\n* Personnalisation et interaction utilisateur avec la librairie *leaflet* (voir [ici](https://rstudio.github.io/leaflet/) pour une présentation complète de la librairie).  \n\n* Création d'une carte en 3 étapes :  \n    + Etape 1 : création de la carte avec *leaflet()*,\n    + Etape 2 : ajout d'un fond de carte avec *addTiles()* (voir [ici](http://leaflet-extras.github.io/leaflet-providers/preview/index.html) pour les différents fonds de carte),\n    + Etape 3 : ajout des polygones avec *addPolygons()*.  \n    \n* Exemple avec les données géographiques *etats*\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(leaflet)\nleaflet(etats) %>% \n  addTiles() %>%\n  addPolygons()\n```\n:::\n\n\n* Remarque : avec *leaflet*, ici pas besoin de re-configurer les données.\n\n## Cartographie avec leaflet (2)\n\n* Association des mesures statistiques à une palette de couleur avec la fonction *colorBin()*\n\n::: {.cell}\n\n```{.r .cell-code}\npalette = colorBin(\"YlOrRd\", domain = etats$var)\n```\n:::\n\n* où  \n    + *\"YlOrd\"* définit la palette de couleurs (ici entre jaune et rouge, voir [color brewer](http://colorbrewer2.org/#type=sequential&scheme=BuGn&n=3) ou [veridis](http://colorbrewer2.org/#type=sequential&scheme=BuGn&n=3) pour d'autres choix de palettes),\n    + *domain* definit les mesures à associer aux couleurs.  \n    \n* Représentation de la carte choroplèthe en indiquant que la couleur de remplissage est fonction de la palette et de la variable avec *fillColor*, et en réglant l'opacité des couleurs avec *fillOpacity* \n\n::: {.cell}\n\n```{.r .cell-code}\nleaflet(etats) %>% \n  addTiles() %>%\n  addPolygons(fillColor = ~palette(var), \n              fillOpacity = .5)\n```\n:::\n\n\n## Cartographie avec leaflet (3)\n\n* Amélioration de la carte précédente : personnalisation de la palette\n\n::: {.cell}\n\n```{.r .cell-code}\npalette = colorBin(\n  \"magma\", \n  domain = etats$var, \n  bins = seq(0, 1, by = .2)\n  )\n```\n:::\n\n\n* où l'option *bins* définit le découpage des valeurs de la mesure en classes, chaque classe étant ensuite associée à une couleur (valeur par défaut = $7$).\n\n## Cartographie avec leaflet (4)\n\n::: {.cell}\n\n```{.r .cell-code}\nleaflet(etats) %>% \n  setView(lat = 0, lng = 0, zoom = 1) %>%\n  addTiles() %>%\n  addPolygons(\n    fillColor = ~palette(var), \n    fillOpacity = .5,\n    color = \"gray30\", \n    weight = 1.5, \n    opacity = 1, \n    dashArray = \"2\"\n  ) %>%\n  addLegend(\n    pal = palette, \n    values = ~var, \n    opacity = 0.8, \n    title = \"Variable aleatoire\",\n    position = \"bottomright\"\n  )\n```\n:::\n\n\n## TP : Exercice 7 avec geojsonio, leaflet, tibble, dplyr et readr\n\n* Rreprendre les données et les graphiques de l'exercice 6. Représenter sur une carte la valeur du contrôle de la corruption en 2016 pour chaque pays. Ajouter au graphique un titre et des légendes convenables.  \n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}